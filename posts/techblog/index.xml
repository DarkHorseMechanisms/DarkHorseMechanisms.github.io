<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Techblog on DarkHorseMechanisms</title>
		<link>https://darkhorsemechanisms.github.io./posts/techblog/</link>
		<description>Recent content in Techblog on DarkHorseMechanisms</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Fri, 12 Jun 2020 02:58:05 +0100</lastBuildDate>
		<atom:link href="https://darkhorsemechanisms.github.io./posts/techblog/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Hugo and this Site</title>
			<link>https://darkhorsemechanisms.github.io./posts/techblog/hugo/hugo/</link>
			<pubDate>Wed, 10 Jun 2020 21:42:35 +0100</pubDate>
			
			<guid>https://darkhorsemechanisms.github.io./posts/techblog/hugo/hugo/</guid>
			<description>I built this site using the Static Site Generator Hugo, and the Hermit theme by Track3.
Why a Static Site? Static sites load once when accessed. This makes them cheap to serve. Services like Netifly and GitHub pages will serve your website for free. Additionally, because they lack dynamic elements (basically the &amp;lsquo;moving parts&amp;rsquo; of a modern website), they don&amp;rsquo;t need updating for security reasons or otherwise. I can &amp;ldquo;fire-and-forget&amp;rdquo; with this setup.</description>
			<content type="html"><![CDATA[<p>I built this site using the Static Site Generator <a href="https://gohugo.io">Hugo</a>, and the Hermit theme by Track3.</p>
<h3 id="why-a-static-site">Why a Static Site?</h3>
<p>Static sites load once when accessed. This makes them cheap to serve. Services like Netifly and GitHub pages will serve your website for free. Additionally, because they lack dynamic elements (basically the &lsquo;moving parts&rsquo; of a modern website), they don&rsquo;t need updating for security reasons or otherwise. I can &ldquo;fire-and-forget&rdquo; with this setup. Additionally, as a new web dev (if you can even call me that), static sites probably represent the simplest route from knowing nothing to having a functioning site.</p>
<h3 id="why-use-hugo">Why use Hugo?</h3>
<p>Jekyll is the &lsquo;default&rsquo; for GitHub pages but aside from GitHub&rsquo;s guidance on Jekyll being more available, Hugo was no more difficult to use and much less difficult to install. In fact, my first choice - on the basis of a Slant comparison promising an active community - was Pelican. I was biased towards this choice because I&rsquo;m a new programmer and I&rsquo;m trying to focus on Python. Additionally, if possible, I want to present functioning Python code in my site. I don&rsquo;t know yet if you can do that using Pelican, but in the meantime I have found PythonAnywhere, to which I can link from this site if I want to present running code, or if it is possible I can use Pelican later to generate the relevant pages. The first versions of this site were made using Pelican but I found the available information unsatisfactory and often out of date. I migrated to Hugo because looking further into comparison sites, it seemed like Hugo has a slight edge in speed. I don&rsquo;t know whether it was an effect of my experience from learning Pelican but I found Hugo much easier, although still difficult enough as a new programmer, to get on with. Other SSGs include Gatsby, which looks good for sites like this, and NextJS, which looks good for commercial sites.</p>
<p>I didn&rsquo;t want to use Wix and ilk:</p>
<blockquote>
<p>I don&rsquo;t care if it hurts, I wanna have control.</p>
</blockquote>
<h3 id="why-write-this-guide">Why write this guide?</h3>
<p>It&rsquo;s partly a record for me, partly a writing exercise, partly trying to help others who might struggle like I did when coming in with no experience. Other guides will be more granular and this should be a supplement to those. Here I&rsquo;ll try to stick to a readable recipe format that will produce results and leave the reader with a holistic understanding of what&rsquo;s going on.</p>
<p>Disadvantages of this guide:</p>
<ol>
<li>It&rsquo;s written from memory by someone not dilligent at keeping notes (hence this blog, to motivate me).</li>
<li>It&rsquo;s not paginated</li>
</ol>
<p>Advantages of this guide:</p>
<ol>
<li>It was writted by an inexperienced programmer (I know which points I struggled with most and can help you with them).</li>
<li>It is up-to-date as of June 10th 2020, where I found other guides to be outdated.</li>
<li>I try to use simple language to explain complicated things. I&rsquo;m a native English speaker. I&rsquo;m using a recipe-esque format and I&rsquo;m keeping my former self/an ignorant hypthetical naive reader in mind.</li>
</ol>
<h3 id="how-exactly-did-you-go-about-making-this-site">How exactly did you go about making this site?</h3>
<p>If you&rsquo;re fully following along with this guide and want to use GitHub pages, you&rsquo;ll need to have and know how to use Git and a GitHub account. To make and work on a test site for later deployment requires only Hugo itself.</p>
<p>First, I downloaded the appropriate Hugo binary from their website. This is where I made my first mistake - I downloaded the standard version for my system, but in fact I later found I needed the <em>extended</em> version. I recommend that you get the extended version, because it lets you rebuild CSS/SASS, which you will need for making and editing colour schemes. If you&rsquo;re using Windows, you can install a Linux version to WSL, and I recommend this option if you have WSL set up - so long as you can get GitHub ssh-connected, which I haven&rsquo;t managed yet, meaning I have to enter my password every time or run a separate terminal for git. It&rsquo;s possible that I could run both Hugo (Windows install?) and Git from GitBash. But I don&rsquo;t trust that method so I&rsquo;m running everything from Powershell, which is easy enough.
Note: I installed using Chocolatey, but this isn&rsquo;t necessary or important for this guide.</p>
<p>Secondly, I wanted to make all the themes available so I could compare them and switch between them. You can skip this step if you want to save space. To do this on Windows, I recommend that you make a folder in your documents called &lsquo;Hugo&rsquo;. Hunting down any usable installation directory for Hugo (at least using Chocolatey) was relatively fruitless, and having the themes in the Hugo install folder will only make them more difficult to find. GitHub holds a massive repository of themes - simply git clone what you want into your Hugo folder, and now you have copies in storage, all updateable with a single command. Please be prepared for the git clone to take quite a long time if you choose to get all of them like I did. I nearly ctrl+c&rsquo;d the process but it finished just as I was hovering over the keyboard.</p>
<p>Next, from your downloaded themes, you&rsquo;ll want to choose one to work with. Fittingly, I liked the &lsquo;Hermit&rsquo; theme by Track3 and used it to build this site. Copy (don&rsquo;t cut and paste because you&rsquo;ll want a clean copy in storage!) the folder of the theme you like and navigate to the folder where you want to make your site. (I did this in the documents/GitHub folder that the GitHub for Windows program left behind on my computer. I&rsquo;m working on a more decentralised mindset (i.e. running Git in whatever folder necessary as it exists in my computer, rather than having a Git &lsquo;section&rsquo;. It&rsquo;s a holdover from the &lsquo;trying Git for the first time&rsquo; mindset)).</p>
<p>Once you&rsquo;ve picked a location for your new site, open a command window in that location. This is Powershell if you&rsquo;re using Windows - I installed on Windows rather than WSL, but I would use WSL if installing again (once I can solve that ssh problem). You can cd into the folder; I more often navigate in File Explorer and use the right-click context menu to open a Windows Terminal window there. Now with a command line open in the correct folder, run &lsquo;hugo new site&rsquo;. Answer the questions honestly and don&rsquo;t worry too much about the answers, we&rsquo;ll be going straight into the settings anyway. This will generate a bunch of files and folders with which you will become very familiar. Hopefully I can save you a little reading on that front.</p>
<p>For now, just copy the theme you want to use into the new directory &lsquo;themes&rsquo;. Now you&rsquo;re ready to go. You can generate a test page at this point with the hugo new test.md command. The settings (front matter) in this page won&rsquo;t be what you want them to at this point, but we&rsquo;re about to change that.</p>
<h4 id="what-does-hugo-do">What does Hugo do?</h4>
<p>Hugo&rsquo;s primary purpose is to make the HTML and CSS files that will make up your site. That&rsquo;s not all it can do, but we will ignore the rest for now.</p>
<h4 id="what-input-does-hugo-take">What input does Hugo take?</h4>
<p>Hugo&rsquo;s input comes from four places:</p>
<ol>
<li>The &lsquo;content&rsquo; folder, where you will store your written files. These files will be in the CommonMark Markdown format, which you can learn in a few minutes. If you can do all the tricks with text on Reddit, you&rsquo;re already proficient in CommonMark*.</li>
<li>The &lsquo;themes&rsquo; folder, which right now contains everything else, kindly provided by the creator of your theme. This includes a prototype site structure for Hugo to create your site with, HTML layouts, CSS stylesheets, images, icons, and more.</li>
<li>The config file, which is located at the root of your document, and will be written in YAML, TOML or JSON - simple and self-explanatory languages that you won&rsquo;t need experience to work with.</li>
<li>The files and folders which you will use to customise your theme. These branch off from your root folder, and replicate files and folders in your &lsquo;themes&rsquo; folder. These will be preferred over your theme&rsquo;s settings but your theme will apply if nothing is found here. More on these later, for now let&rsquo;s look at your config file.</li>
</ol>
<h3 id="your-config-file">Your config file</h3>
<p>Hugo will have created this for you when you ran &lsquo;new site&rsquo;. However it will have the default info in it, which is unlikely to be compatible with your theme. So, you&rsquo;ll need to dive into the documentation for the theme to find compatible settings. You&rsquo;re likely to find these in the readme in the theme&rsquo;s root folder, and another example in the theme&rsquo;s example site if provided. Open these files (in a suitable text editor such as Sublime Text 3, Visual Studio Code, or NotePad++) and hold them to one side. Finally, open your own config file and get to work. I&rsquo;ll provide mine, which is in TOML, as a third reference which might be useful:</p>
<pre><code>baseURL = &quot;https://darkhorsemechanisms.github.io./&quot;
relativeURLs  = true
canonifyURLs  = false
languageCode = &quot;en&quot;
defaultContentLanguage = &quot;en&quot;
title = &quot;DarkHorseMechanisms&quot;
subtitle = &quot;A place I share with you&quot;
metadescription = &quot;A home for all my projects&quot;

newContentEditor = &quot;C:/Program Files/Sublime Text 3/sublime_text.exe&quot;

publishdir    = &quot;./public&quot;
contentDir    = &quot;./content&quot;
layoutsDir    = &quot;./layouts&quot;

theme = &quot;hermit&quot;
enableGitInfo = false
pygmentsCodefences  = true
pygmentsUseClasses  = true
rssLimit = 10  # Maximum number of items in the RSS feed.
copyright = &quot;This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.&quot; # This message is only used by the RSS template.
enableEmoji = true  # Shorthand emojis in content files - https://gohugo.io/functions/emojify/
# googleAnalytics = &quot;UA-123-45&quot;
# disqusShortname = &quot;yourdiscussshortname&quot;

buildDraft  = true
buildFuture = true
buildExpired = true


[author]
  name = &quot;DarkHorseMechanisms&quot;

[blackfriday]
  # hrefTargetBlank = true
  # noreferrerLinks = true
  # nofollowLinks = true


[taxonomies]
  tag = &quot;tags&quot;
  # Categories are disabled by default.

[params]
  dateform        = &quot;Mon, 02 Jan 2006 15:04:05 MST&quot;
  dateformShort   = &quot;2 Jan&quot;
  dateformNum     = &quot;2006-01-02&quot;
  dateformNumTime = &quot;2006-01-02 15:04 -0700&quot;

  # Metadata mostly used in document's head
  # description = &quot;&quot;
  # images = [&quot;&quot;]
  themeColor = &quot;#000000&quot; # uses RGB codes?

  homeSubtitle = &quot;&quot;
  footerCopyright = ' &amp;#183; &lt;a href=&quot;https://creativecommons.org/licenses/by-nc/4.0/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CC BY-NC 4.0&lt;/a&gt;'
  bgImg = &quot;hojackborseman2.png&quot;  # Homepage background-image URL

  # Prefix of link to the git commit detail page. GitInfo must be enabled.
  # gitUrl = &quot;https://github.com/DarkHorseMechanisms/&quot;

  # Toggling this option needs to rebuild SCSS, requires Hugo extended version
  justifyContent = false  # Set &quot;text-align: justify&quot; to `.content`.

  relatedPosts = false  # Add a related content section to all single posts page

  code_copy_button = true # Turn on/off the code-copy-button for code-fields
  
  # Add custom css
  # customCSS = [&quot;./css/style.min.1af9598a67c2b0d68e66dfdd87aa5011a434a38bc7a6991709217bbd786ca823.css&quot;]

  # Social Icons
  # Check https://github.com/Track3/hermit#social-icons for more info.
  [[params.social]]
    name = &quot;twitter&quot;
    url = &quot;https://twitter.com/DarkMechanisms&quot;

  # [[params.social]]
  #  name  = &quot;youtube&quot;
  #  url   = &quot;https://www.youtube.com/channel/UCGGxnGLPnSjlsQjufz1IYQQ/featured&quot;

  [[params.social]]
    name  = &quot;github&quot;
    url   = &quot;https://github.com/DarkHorseMechanisms&quot;

  [[params.social]]
    name  = &quot;reddit&quot;
    url   = &quot;https://reddit.com/u/DarkHorseMechanisms&quot;

[menu]

  [[menu.main]]
    name    = &quot;TechBlog&quot;
    url     = &quot;posts/techblog&quot;
    weight  = 10

  [[menu.main]]
    name    = &quot;Links&quot;
    url     = &quot;/posts/links&quot;
    weight  = 15

  [[menu.main]]
    name    = &quot;About&quot;
    url     = &quot;posts/about/&quot;
    weight  = 20
</code></pre><p>Note: I may have messed a few of these up, in particular I&rsquo;m suspicious of the date and time fields.</p>
<p>I&rsquo;d start by copying in one of your example files, then comparing it to the other and importing any (I mean any, even if you comment them out for the time being) setting that you think you might need. The TOML, YAML and JSON formats are simple enough to work with. Once you have a config file that looks like it will do what you want, you should save a backup copy (it&rsquo;s simpler not to init git here until git is set up in your /public directory.)</p>
<p>Everything before [params] is a Hugo builtin setting and won&rsquo;t* break your theme. Everything after [params] is used by your theme&rsquo;s files. Once you have things personalised to your liking (&lsquo;theme&rsquo; must match the exact name of the folder holding your theme - for myself I had to rename &lsquo;hugo-hermit&rsquo; folder to just &lsquo;hermit&rsquo;) you should definitely test run a site by following these steps.</p>
<ol>
<li>
<p>Make a new page (hugo new filename.md) if you haven&rsquo;t already, and make sure it&rsquo;s in content or in content/folder where &lsquo;folder&rsquo; equals the name of the directory that Hugo is expecting to find. The file will contain some &lsquo;front matter&rsquo; at the top, and the rest will be in markdown. You can type plain text in the lower part of this file without much issue if you don&rsquo;t know markdown yet, just don&rsquo;t use any special characters for now (*, \, _ etc). This file will be converted to HTML by Hugo, but you might first need to change the &lsquo;draft&rsquo; field to false in the front matter or set buildDraft to true in your config.</p>
</li>
<li>
<p>From the root folder, run the &lsquo;hugo serve -v&rsquo; command. This will verbosely create a temporary version of your site to view locally, at the browser address provided when the command has run. Mine deploys to http://localhost:1313/.</p>
</li>
<li>
<p>If an error occurs, check various things - you might not have saved files in your open text editors so the changes won&rsquo;t be read by Hugo. You might need to change some settings, or update your version of the theme (this is unlikely if you got it from git but it happened to me when I downloaded from the theme homepage). If no errors occur, have a look at your site and browse around. Congratulations!</p>
</li>
</ol>
<p>You can now deploy to GitHub Pages. From the root directory (where your config file is), run the &lsquo;hugo&rsquo; command. Navigate to /public (using the cd ./p* command to save time) and run git init. Next you&rsquo;ll need a repo in your GitHub called &lsquo;yourusername&rsquo;.github.io. and to go into settings in that repo to activate it as a website. Finally, push the local repo holding your site into that remote GitHub repo. Your site will shortly be available at yourusername.github.io.</p>
<p>Next we will talk about getting more granular than the config file, when it comes to customising your website.</p>
]]></content>
		</item>
		
	</channel>
</rss>
